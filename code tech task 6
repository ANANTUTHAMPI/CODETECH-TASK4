// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract DeFiLending {
    
    struct Loan {
        uint id;
        address borrower;
        uint256 amount;
        uint256 interestRate;
        uint256 dueDate;
        bool repaid;
    }

    mapping(address => uint256) public balances;
    mapping(uint => Loan) public loans;
    uint public loanCount = 0;

    event Deposit(address indexed user, uint256 amount);
    event Withdrawal(address indexed user, uint256 amount);
    event LoanRequested(uint id, address indexed borrower, uint256 amount, uint256 interestRate, uint256 dueDate);
    event LoanRepaid(uint id, address indexed borrower);

    // Deposit funds into the contract
    function deposit() public payable {
        require(msg.value > 0, "Deposit amount must be greater than zero");
        balances[msg.sender] += msg.value;
        emit Deposit(msg.sender, msg.value);
    }

    // Withdraw funds from the contract
    function withdraw(uint256 _amount) public {
        require(balances[msg.sender] >= _amount, "Insufficient balance");
        balances[msg.sender] -= _amount;
        payable(msg.sender).transfer(_amount);
        emit Withdrawal(msg.sender, _amount);
    }

    // Request a loan
    function requestLoan(uint256 _amount, uint256 _interestRate, uint256 _dueDate) public {
        require(_amount > 0, "Loan amount must be greater than zero");
        require(_dueDate > block.timestamp, "Due date must be in the future");

        loanCount++;
        loans[loanCount] = Loan(
            loanCount,
            msg.sender,
            _amount,
            _interestRate,
            _dueDate,
            false
        );

        emit LoanRequested(loanCount, msg.sender, _amount, _interestRate, _dueDate);
    }

    // Repay a loan
    function repayLoan(uint _loanId) public payable {
        require(_loanId > 0 && _loanId <= loanCount, "Invalid loan ID");
        Loan storage loan = loans[_loanId];
        require(msg.sender == loan.borrower, "Only the borrower can repay the loan");
        require(!loan.repaid, "Loan already repaid");
        
        uint256 repaymentAmount = loan.amount + (loan.amount * loan.interestRate / 100);
        require(msg.value >= repaymentAmount, "Insufficient repayment amount");

        loan.repaid = true;
        balances[address(this)] += repaymentAmount;

        emit LoanRepaid(_loanId, msg.sender);
    }

    // Check loan details
    function getLoan(uint _loanId) public view returns (
        uint,
        address,
        uint256,
        uint256,
        uint256,
        bool
    ) {
        require(_loanId > 0 && _loanId <= loanCount, "Invalid loan ID");
        Loan storage loan = loans[_loanId];
        return (
            loan.id,
            loan.borrower,
            loan.amount,
            loan.interestRate,
            loan.dueDate,
            loan.repaid
        );
    }
}
